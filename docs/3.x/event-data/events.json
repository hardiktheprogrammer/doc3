[
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\assetpreviews\\Image",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\assetpreviews\\Pdf",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\assetpreviews\\Text",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\assetpreviews\\Video",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\AssetPreviewHandler",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\Component",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\ConfigurableComponent",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\Element",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\ElementAction",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\ElementExporter",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\Field",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\FlysystemVolume",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\Model",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Plugin",
        "name": "EVENT_BEFORE_SAVE_SETTINGS",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the pluginâ€™s settings are saved."
    },
    {
        "class": "craft\\base\\Plugin",
        "name": "EVENT_AFTER_SAVE_SETTINGS",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the pluginâ€™s settings are saved."
    },
    {
        "class": "craft\\base\\Plugin",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "craft\\base\\Plugin",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\SavableComponent",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\Utility",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\Volume",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\base\\Widget",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\console\\Application",
        "name": "EVENT_BEFORE_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised before the application starts to handle a request."
    },
    {
        "class": "craft\\console\\Application",
        "name": "EVENT_AFTER_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised after the application successfully handles a request (before the response is sent out)."
    },
    {
        "class": "craft\\console\\Application",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "craft\\console\\Application",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "craft\\console\\Controller",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\ErrorHandler",
        "name": "EVENT_BEFORE_HANDLE_EXCEPTION",
        "type": "craft\\events\\ExceptionEvent",
        "desc": "The event that is triggered before handling an exception."
    },
    {
        "class": "craft\\console\\controllers\\BackupController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\BackupController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\BackupController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\BaseSystemStatusController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\BaseSystemStatusController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\BaseSystemStatusController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\ClearCachesController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\ClearCachesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\ClearCachesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\ClearDeprecationsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\ClearDeprecationsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\ClearDeprecationsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\DbController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\DbController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\DbController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\FixtureController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\FixtureController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\GcController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\GcController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\GcController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\GraphqlController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\GraphqlController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\GraphqlController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\IndexAssetsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\IndexAssetsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\IndexAssetsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\InstallController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\InstallController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\InstallController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\InvalidateTagsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\InvalidateTagsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\InvalidateTagsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\MailerController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\MailerController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\MailerController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\MigrateController",
        "name": "EVENT_REGISTER_MIGRATOR",
        "type": "craft\\events\\RegisterMigratorEvent",
        "desc": "The event that is triggered when resolving an unknown migration track."
    },
    {
        "class": "craft\\console\\controllers\\MigrateController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\MigrateController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\OffController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\OffController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\OffController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\OnController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\OnController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\OnController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\PluginController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\PluginController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\PluginController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\ProjectConfigController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\ProjectConfigController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\ProjectConfigController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\ResaveController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\ResaveController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\ResaveController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\RestoreController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\RestoreController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\RestoreController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\ServeController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\ServeController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\SetupController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\SetupController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\SetupController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\TestsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\TestsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\TestsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\UpController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\UpController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\UpController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\UpdateController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\UpdateController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\UpdateController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\UsersController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\UsersController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\UsersController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\utils\\AsciiFilenamesController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\utils\\AsciiFilenamesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\utils\\AsciiFilenamesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\utils\\FixElementUidsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\utils\\FixElementUidsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\utils\\FixElementUidsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\utils\\PruneProvisionalDraftsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\utils\\PruneProvisionalDraftsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\utils\\PruneProvisionalDraftsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\utils\\PruneRevisionsController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\utils\\PruneRevisionsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\utils\\PruneRevisionsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\utils\\RepairController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\utils\\RepairController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\utils\\RepairController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\console\\controllers\\utils\\UpdateUsernamesController",
        "name": "EVENT_DEFINE_ACTIONS",
        "type": "craft\\events\\DefineConsoleActionsEvent",
        "desc": "The event that is triggered when defining custom actions for this controller."
    },
    {
        "class": "craft\\console\\controllers\\utils\\UpdateUsernamesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\console\\controllers\\utils\\UpdateUsernamesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\AppController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\AppController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\AssetSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\AssetSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\AssetTransformsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\AssetTransformsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\AssetsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\AssetsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\BaseElementsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\BaseElementsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\BaseEntriesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\BaseEntriesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\BaseUpdaterController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\BaseUpdaterController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\CategoriesController",
        "name": "EVENT_PREVIEW_CATEGORY",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered when a categoryâ€™s template is rendered for Live Preview."
    },
    {
        "class": "craft\\controllers\\CategoriesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\CategoriesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\ChartsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\ChartsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\ConfigSyncController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\ConfigSyncController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\DashboardController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\DashboardController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\DraftsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\DraftsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\EditController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\EditController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\ElementIndexSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\ElementIndexSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\ElementIndexesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\ElementIndexesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\ElementsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\ElementsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\EntriesController",
        "name": "EVENT_PREVIEW_ENTRY",
        "type": "craft\\controllers\\ElementEvent",
        "desc": "The event that is triggered when an entryâ€™s template is rendered for Live Preview."
    },
    {
        "class": "craft\\controllers\\EntriesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\EntriesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\EntryRevisionsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\EntryRevisionsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\FieldsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\FieldsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\GlobalsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\GlobalsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\GraphqlController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\GraphqlController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\InstallController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\InstallController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\LivePreviewController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\LivePreviewController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\NotFoundController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\NotFoundController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\PluginStoreController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\PluginStoreController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\PluginsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\PluginsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\PreviewController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\PreviewController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\ProjectConfigController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\ProjectConfigController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\QueueController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\QueueController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\RebrandController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\RebrandController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\RedirectController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\RedirectController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\RoutesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\RoutesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\SectionsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\SectionsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\SitesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\SitesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\StructuresController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\StructuresController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\SystemMessagesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\SystemMessagesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\SystemSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\SystemSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\TagsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\TagsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\TemplatesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\TemplatesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\UpdaterController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\UpdaterController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\UserSettingsController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\UserSettingsController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_LOGIN_FAILURE",
        "type": "craft\\events\\LoginFailureEvent",
        "desc": "The event that is triggered when a failed login attempt was made"
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_REGISTER_USER_ACTIONS",
        "type": "craft\\events\\RegisterUserActionsEvent",
        "desc": "The event that is triggered when a userâ€™s available actions are being registered"
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_BEFORE_ASSIGN_GROUPS_AND_PERMISSIONS",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered BEFORE user groups and permissions ARE assigned to the user getting saved"
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_AFTER_ASSIGN_GROUPS_AND_PERMISSIONS",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after user groups and permissions have been assigned to the user getting saved"
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_DEFINE_CONTENT_SUMMARY",
        "type": "craft\\events\\DefineUserContentSummaryEvent",
        "desc": "The event that is triggered when defining a summary of content owned by a user(s), before they are deleted"
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_INVALID_USER_TOKEN",
        "type": "craft\\events\\InvalidUserTokenEvent",
        "desc": "The event that is triggered when an invalid user token is sent."
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\UsersController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\UtilitiesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\UtilitiesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\VolumesController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\VolumesController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\pluginstore\\InstallController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\pluginstore\\InstallController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\controllers\\pluginstore\\RemoveController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\controllers\\pluginstore\\RemoveController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\db\\ActiveQuery",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the query is initialized via `init()`."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\db\\ActiveRecord",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_BEFORE_CREATE_BACKUP",
        "type": "craft\\events\\BackupEvent",
        "desc": "The event that is triggered before the backup is created."
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_AFTER_CREATE_BACKUP",
        "type": "craft\\events\\BackupEvent",
        "desc": "The event that is triggered after the backup is created."
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_BEFORE_RESTORE_BACKUP",
        "type": "craft\\events\\RestoreEvent",
        "desc": "The event that is triggered before the restore is started."
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_AFTER_RESTORE_BACKUP",
        "type": "craft\\events\\RestoreEvent",
        "desc": "The event that is triggered after the restore occurred."
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_AFTER_OPEN",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered after a DB connection is established"
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_BEGIN_TRANSACTION",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered right before a top-level transaction is started"
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_COMMIT_TRANSACTION",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered right after a top-level transaction is committed"
    },
    {
        "class": "craft\\db\\Connection",
        "name": "EVENT_ROLLBACK_TRANSACTION",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered right after a top-level transaction is rolled back"
    },
    {
        "class": "craft\\db\\Migration",
        "name": "EVENT_AFTER_UP",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is executed"
    },
    {
        "class": "craft\\db\\Migration",
        "name": "EVENT_AFTER_DOWN",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is reverted"
    },
    {
        "class": "craft\\db\\Query",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\db\\Query",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\db\\StructuredElementQuery",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the query is initialized via `init()`."
    },
    {
        "class": "craft\\debug\\Module",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "craft\\debug\\Module",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_BEFORE_HANDLE_FILE",
        "type": "craft\\events\\AssetEvent",
        "desc": "The event that is triggered before an asset is uploaded to volume.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Asset",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Category",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_ENTRY_TYPES",
        "type": "craft\\events\\DefineEntryTypesEvent",
        "desc": "The event that is triggered when defining the available entry types for the entry",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Entry",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "draft": {
                "label": "Element is a draft",
                "conditionsPhp": "ElementHelper::isDraft($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "revision",
                    "firstSave"
                ]
            },
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "provisional": {
                "label": "Element is a provisional draft",
                "conditionsPhp": "ElementHelper::rootElement($event->sender)->isProvisionalDraft",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "revision",
                    "firstSave"
                ]
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            },
            "revision": {
                "label": "Element is a revision",
                "conditionsPhp": "ElementHelper::isRevision($event->sender)",
                "imports": [
                    "craft\\helpers\\ElementHelper"
                ],
                "excludes": [
                    "draft",
                    "provisional",
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\GlobalSet",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\MatrixBlock",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\Tag",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_BEFORE_AUTHENTICATE",
        "type": "craft\\events\\AuthenticateUserEvent",
        "desc": "The event that is triggered before a user is authenticated.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_NAME",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the userâ€™s name, as returned by `getName()` or `__toString()`.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_FRIENDLY_NAME",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the userâ€™s friendly name, as returned by `getFriendlyName()`.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\User",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\CopyReferenceTag",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\CopyUrl",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\DeepDuplicate",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\Delete",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\DeleteAssets",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\DeleteForSite",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\DeleteUsers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\DownloadAssetFile",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\Duplicate",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\Edit",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\EditImage",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\NewChild",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingAfter",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\NewSiblingBefore",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\PreviewAsset",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\RenameFile",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\ReplaceFile",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\Restore",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\SetStatus",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\SuspendUsers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\UnsuspendUsers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\actions\\View",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\db\\AssetQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\AssetQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\AssetQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\AssetQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\AssetQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\CategoryQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\CategoryQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\CategoryQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\CategoryQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\CategoryQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\ElementQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\ElementQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\ElementQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\ElementQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\ElementQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\EntryQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\EntryQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\EntryQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\EntryQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\EntryQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\GlobalSetQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\GlobalSetQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\GlobalSetQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\GlobalSetQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\GlobalSetQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\MatrixBlockQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\MatrixBlockQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\MatrixBlockQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\MatrixBlockQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\MatrixBlockQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\TagQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\TagQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\TagQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\TagQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\TagQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\db\\UserQuery",
        "name": "EVENT_BEFORE_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the beginning of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\UserQuery",
        "name": "EVENT_AFTER_PREPARE",
        "type": "craft\\elements\\db\\Event",
        "desc": "An event that is triggered at the end of preparing an element query for the query builder."
    },
    {
        "class": "craft\\elements\\db\\UserQuery",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\PopulateElementEvent",
        "desc": "The event that is triggered after an element is populated."
    },
    {
        "class": "craft\\elements\\db\\UserQuery",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the query's init cycle"
    },
    {
        "class": "craft\\elements\\db\\UserQuery",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\exporters\\Expanded",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\elements\\exporters\\Raw",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_LOCATE_UPLOADED_FILES",
        "type": "craft\\events\\LocateUploadedFilesEvent",
        "desc": "The event that is triggered when identifying any uploaded files that should be stored as assets and related by the field."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Assets",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\BaseOptionsField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\BaseRelationField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Categories",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Checkboxes",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Color",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Date",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Dropdown",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Email",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Entries",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Lightswitch",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_SET_FIELD_BLOCK_TYPES",
        "type": "craft\\fields\\SectionEvent",
        "desc": "The event that is triggered before a section is saved."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Matrix",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\MissingField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\MultiSelect",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Number",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\PlainText",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\RadioButtons",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Table",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Tags",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Time",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Url",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_SELECTION_CRITERIA",
        "type": "craft\\events\\ElementCriteriaEvent",
        "desc": "The event that is triggered when defining the selection criteria for this field."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is saved."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_ELEMENT_SAVE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is saved."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_ELEMENT_PROPAGATE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is deleted."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_ELEMENT_DELETE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is deleted."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered before the element is restored."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_ELEMENT_RESTORE",
        "type": "craft\\events\\FieldElementEvent",
        "desc": "The event that is triggered after the element is restored."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineFieldKeywordsEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s search keywords for an element."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_INPUT_HTML",
        "type": "craft\\events\\DefineFieldHtmlEvent",
        "desc": "The event that is triggered when defining the fieldâ€™s input HTML."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\fields\\Users",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_DEFINE_GQL_ARGUMENT_HANDLERS",
        "type": "craft\\gql\\RegisterGqlArgumentHandlers",
        "desc": "The event that is triggered when GraphQL argument are being handled."
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\ArgumentManager",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_REGISTER_GQL_EAGERLOADABLE_FIELDS",
        "type": "craft\\events\\RegisterGqlEagerLoadableFields",
        "desc": "The event that is triggered when registering additional eager-loading nodes."
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\ElementQueryConditionBuilder",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_DEFINE_GQL_TYPE_FIELDS",
        "type": "craft\\gql\\DefineGqlTypeFields",
        "desc": "The event that is triggered when GraphQL type fields are being prepared."
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\TypeManager",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered before populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered after populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\base\\ElementMutationResolver",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\base\\MutationResolver",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered before populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered after populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Asset",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered before populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered after populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Category",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered before populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered after populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Entry",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered before populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered after populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\GlobalSet",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_BEFORE_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered before populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_AFTER_POPULATE_ELEMENT",
        "type": "craft\\events\\MutationPopulateElementEvent",
        "desc": "The event that is triggered after populating an element when resolving a mutation"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\gql\\resolvers\\mutations\\Tag",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\i18n\\PhpMessageSource",
        "name": "EVENT_MISSING_TRANSLATION",
        "type": "yii\\i18n\\MissingTranslationEvent",
        "desc": "an event that is triggered when a message translation is not found."
    },
    {
        "class": "craft\\mail\\Mailer",
        "name": "EVENT_BEFORE_PREP",
        "type": "yii\\mail\\MailEvent",
        "desc": "The event that is triggered before a message is prepped to be sent."
    },
    {
        "class": "craft\\mail\\Mailer",
        "name": "EVENT_BEFORE_SEND",
        "type": "yii\\mail\\MailEvent",
        "desc": "an event raised right before send. You may set `MailEvent::isValid` to be false to cancel the send."
    },
    {
        "class": "craft\\mail\\Mailer",
        "name": "EVENT_AFTER_SEND",
        "type": "yii\\mail\\MailEvent",
        "desc": "an event raised right after send."
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\mail\\transportadapters\\BaseTransportAdapter",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\mail\\transportadapters\\Gmail",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\mail\\transportadapters\\Sendmail",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\mail\\transportadapters\\Smtp",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\migrations\\CreateDbCacheTable",
        "name": "EVENT_AFTER_UP",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is executed"
    },
    {
        "class": "craft\\migrations\\CreateDbCacheTable",
        "name": "EVENT_AFTER_DOWN",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is reverted"
    },
    {
        "class": "craft\\migrations\\CreateMatrixContentTable",
        "name": "EVENT_AFTER_UP",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is executed"
    },
    {
        "class": "craft\\migrations\\CreateMatrixContentTable",
        "name": "EVENT_AFTER_DOWN",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is reverted"
    },
    {
        "class": "craft\\migrations\\CreatePhpSessionTable",
        "name": "EVENT_AFTER_UP",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is executed"
    },
    {
        "class": "craft\\migrations\\CreatePhpSessionTable",
        "name": "EVENT_AFTER_DOWN",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is reverted"
    },
    {
        "class": "craft\\migrations\\Install",
        "name": "EVENT_AFTER_UP",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is executed"
    },
    {
        "class": "craft\\migrations\\Install",
        "name": "EVENT_AFTER_DOWN",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the migration is reverted"
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\AssetIndexData",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\AssetTransform",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\AssetTransformIndex",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_ENTRY_TYPES",
        "type": "craft\\events\\DefineEntryTypesEvent",
        "desc": "The event that is triggered when defining the available entry types for the entry",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\BaseEntryRevisionModel",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\CategoryGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\CraftIdToken",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\CraftSupport",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\DeprecationError",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_ENTRY_TYPES",
        "type": "craft\\events\\DefineEntryTypesEvent",
        "desc": "The event that is triggered when defining the available entry types for the entry",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryDraft",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\EntryType",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_ENTRY_TYPES",
        "type": "craft\\events\\DefineEntryTypesEvent",
        "desc": "The event that is triggered when defining the available entry types for the entry",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_SOURCES",
        "type": "craft\\events\\RegisterElementSourcesEvent",
        "desc": "The event that is triggered when registering the available sources for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_FIELD_LAYOUTS",
        "type": "craft\\events\\RegisterElementFieldLayoutsEvent",
        "desc": "The event that is triggered when registering all of the field layouts associated with elements from a given source.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_ACTIONS",
        "type": "craft\\events\\RegisterElementActionsEvent",
        "desc": "The event that is triggered when registering the available actions for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_EXPORTERS",
        "type": "craft\\events\\RegisterElementExportersEvent",
        "desc": "The event that is triggered when registering the available exporters for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_SEARCHABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementSearchableAttributesEvent",
        "desc": "The event that is triggered when registering the searchable attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_SORT_OPTIONS",
        "type": "craft\\events\\RegisterElementSortOptionsEvent",
        "desc": "The event that is triggered when registering the sort options for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_DEFAULT_TABLE_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementTableAttributesEvent",
        "desc": "The event that is triggered when registering the table attributes for the element type.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_PREP_QUERY_FOR_TABLE_ATTRIBUTE",
        "type": "craft\\events\\ElementIndexTableAttributeEvent",
        "desc": "The event that is triggered when preparing an element query for an element index, for each attribute present in the table.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_EAGER_LOADING_MAP",
        "type": "craft\\events\\DefineEagerLoadingMapEvent",
        "desc": "The event that is triggered when defining an eager-loading map.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_SET_EAGER_LOADED_ELEMENTS",
        "type": "craft\\events\\SetEagerLoadedElementsEvent",
        "desc": "The event that is triggered when setting eager-loaded elements.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_PREVIEW_TARGETS",
        "type": "craft\\events\\RegisterPreviewTargetsEvent",
        "desc": "The event that is triggered when registering the elementâ€™s preview targets.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_SET_TABLE_ATTRIBUTE_HTML",
        "type": "craft\\events\\SetElementTableAttributeHtmlEvent",
        "desc": "The event that is triggered when defining the HTML to represent a table attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_REGISTER_HTML_ATTRIBUTES",
        "type": "craft\\events\\RegisterElementHtmlAttributesEvent",
        "desc": "The event that is triggered when registering the HTML attributes that should be included in the elementâ€™s DOM representation in the control panel.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_SIDEBAR_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_META_FIELDS_HTML",
        "type": "craft\\events\\DefineHtmlEvent",
        "desc": "The event that is triggered when defining the HTML for meta fields within the elementâ€™s editor slideout sidebar.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_METADATA",
        "type": "craft\\events\\DefineMetadataEvent",
        "desc": "The event that is triggered when defining the elementâ€™s metadata info.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_IS_EDITABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be editable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_IS_DELETABLE",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when determining whether the element should be deletable by the current user.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_SET_ROUTE",
        "type": "craft\\events\\SetElementRouteEvent",
        "desc": "The event that is triggered when defining the route that should be used when this elementâ€™s URL is requested.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_KEYWORDS",
        "type": "craft\\events\\DefineAttributeKeywordsEvent",
        "desc": "The event that is triggered when defining the search keywords for an element attribute.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_AFTER_PROPAGATE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the element is fully saved and propagated to other sites.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_BEFORE_RESTORE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_AFTER_RESTORE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_BEFORE_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered before the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_AFTER_MOVE_IN_STRUCTURE",
        "type": "craft\\events\\ElementStructureEvent",
        "desc": "The event that is triggered after the element is moved in a structure.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\EntryVersion",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->sender->duplicateOf && $event->sender->getIsCanonical() && !$event->sender->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->sender->enabled && $event->sender->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->sender->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->sender->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->sender->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\FieldGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_DEFINE_STANDARD_FIELDS",
        "type": "craft\\events\\DefineFieldLayoutFieldsEvent",
        "desc": "The event that is triggered when defining the standard (not custom) fields for the layout."
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_DEFINE_UI_ELEMENTS",
        "type": "craft\\events\\DefineFieldLayoutElementsEvent",
        "desc": "The event that is triggered when defining UI elements for the layout."
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_CREATE_FORM",
        "type": "craft\\events\\CreateFieldLayoutFormEvent",
        "desc": "The event that is triggered when creating a new field layout form."
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\FieldLayout",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\FieldLayoutForm",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\FieldLayoutFormTab",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\FieldLayoutTab",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\FolderCriteria",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\GqlSchema",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\GqlToken",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Info",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\MailSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\MatrixBlockType",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Section",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Section_SiteSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Site",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\SiteGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Structure",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\SystemMessage",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\TagGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Update",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\UpdateRelease",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Updates",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\Url",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\UserGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\models\\VolumeFolder",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\queue\\Command",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\queue\\Command",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_WORKER_START",
        "type": "yii\\queue\\cli\\WorkerEvent",
        "desc": "that is triggered when the worker is started."
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_WORKER_LOOP",
        "type": "yii\\queue\\cli\\WorkerEvent",
        "desc": "that is triggered each iteration between requests to queue."
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_WORKER_STOP",
        "type": "yii\\queue\\cli\\WorkerEvent",
        "desc": "that is triggered when the worker is stopped."
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_BEFORE_PUSH",
        "type": "yii\\queue\\PushEvent"
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_AFTER_PUSH",
        "type": "yii\\queue\\PushEvent"
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_BEFORE_EXEC",
        "type": "yii\\queue\\ExecEvent"
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_AFTER_EXEC",
        "type": "yii\\queue\\ExecEvent"
    },
    {
        "class": "craft\\queue\\Queue",
        "name": "EVENT_AFTER_ERROR",
        "type": "yii\\queue\\ExecEvent"
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Asset",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\AssetIndexData",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\AssetTransform",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Category",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\CategoryGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\CategoryGroup_SiteSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\CraftIdToken",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Element",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Element_SiteSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Entry",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\EntryType",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Field",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\FieldGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\FieldLayout",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\FieldLayoutField",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\FieldLayoutTab",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\GlobalSet",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\GqlSchema",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\GqlToken",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\MatrixBlock",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\MatrixBlockType",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Plugin",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Section",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Section_SiteSettings",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Session",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Site",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\SiteGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Structure",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\StructureElement",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\SystemMessage",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Tag",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\TagGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Token",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\User",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\UserGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\UserGroup_User",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\UserPermission",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\UserPermission_User",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\UserPermission_UserGroup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Volume",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\VolumeFolder",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\records\\Widget",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_BEFORE_SAVE_ASSET_TRANSFORM",
        "type": "craft\\events\\AssetTransformEvent",
        "desc": "The event that is triggered before an asset transform is saved"
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_AFTER_SAVE_ASSET_TRANSFORM",
        "type": "craft\\events\\AssetTransformEvent",
        "desc": "The event that is triggered after an asset transform is saved"
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_BEFORE_DELETE_ASSET_TRANSFORM",
        "type": "craft\\events\\AssetTransformEvent",
        "desc": "The event that is triggered before an asset transform is deleted"
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_AFTER_DELETE_ASSET_TRANSFORM",
        "type": "craft\\events\\AssetTransformEvent",
        "desc": "The event that is triggered after an asset transform is deleted"
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_GENERATE_TRANSFORM",
        "type": "craft\\events\\GenerateTransformEvent",
        "desc": "The event that is triggered when a transform is being generated for an Asset."
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_BEFORE_DELETE_TRANSFORMS",
        "type": "craft\\events\\AssetTransformImageEvent",
        "desc": "The event that is triggered before deleting generated transforms."
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_BEFORE_APPLY_TRANSFORM_DELETE",
        "type": "craft\\events\\AssetTransformEvent",
        "desc": "The event that is triggered before a transform delete is applied to the database."
    },
    {
        "class": "craft\\services\\AssetTransforms",
        "name": "EVENT_AFTER_DELETE_TRANSFORMS",
        "type": "craft\\events\\AssetTransformImageEvent",
        "desc": "The event that is triggered after deleting generated transforms."
    },
    {
        "class": "craft\\services\\Assets",
        "name": "EVENT_BEFORE_REPLACE_ASSET",
        "type": "craft\\events\\ReplaceAssetEvent",
        "desc": "The event that is triggered before an asset is replaced."
    },
    {
        "class": "craft\\services\\Assets",
        "name": "EVENT_AFTER_REPLACE_ASSET",
        "type": "craft\\events\\ReplaceAssetEvent",
        "desc": "The event that is triggered after an asset is replaced."
    },
    {
        "class": "craft\\services\\Assets",
        "name": "EVENT_GET_ASSET_URL",
        "type": "craft\\events\\GetAssetUrlEvent",
        "desc": "The event that is triggered when a transform is being generated for an Asset."
    },
    {
        "class": "craft\\services\\Assets",
        "name": "EVENT_GET_ASSET_THUMB_URL",
        "type": "craft\\events\\GetAssetThumbUrlEvent",
        "desc": "The event that is triggered when a thumbnail is being generated for an Asset."
    },
    {
        "class": "craft\\services\\Assets",
        "name": "EVENT_GET_THUMB_PATH",
        "type": "craft\\events\\AssetThumbEvent",
        "desc": "The event that is triggered when a thumbnail path is requested."
    },
    {
        "class": "craft\\services\\Assets",
        "name": "EVENT_REGISTER_PREVIEW_HANDLER",
        "type": "craft\\events\\AssetPreviewEvent",
        "desc": "The event that is triggered when determining the preview handler for an asset."
    },
    {
        "class": "craft\\services\\Categories",
        "name": "EVENT_BEFORE_SAVE_GROUP",
        "type": "craft\\events\\CategoryGroupEvent",
        "desc": "The event that is triggered before a category group is saved."
    },
    {
        "class": "craft\\services\\Categories",
        "name": "EVENT_AFTER_SAVE_GROUP",
        "type": "craft\\events\\CategoryGroupEvent",
        "desc": "The event that is triggered after a category group is saved."
    },
    {
        "class": "craft\\services\\Categories",
        "name": "EVENT_BEFORE_DELETE_GROUP",
        "type": "craft\\events\\CategoryGroupEvent",
        "desc": "The event that is triggered before a category group is deleted."
    },
    {
        "class": "craft\\services\\Categories",
        "name": "EVENT_BEFORE_APPLY_GROUP_DELETE",
        "type": "craft\\events\\CategoryGroupEvent",
        "desc": "The event that is triggered before a category group delete is applied to the database."
    },
    {
        "class": "craft\\services\\Categories",
        "name": "EVENT_AFTER_DELETE_GROUP",
        "type": "craft\\events\\CategoryGroupEvent",
        "desc": "The event that is triggered after a category group is deleted."
    },
    {
        "class": "craft\\services\\Content",
        "name": "EVENT_BEFORE_SAVE_CONTENT",
        "type": "craft\\events\\ElementContentEvent",
        "desc": "The event that is triggered before an element's content is saved."
    },
    {
        "class": "craft\\services\\Content",
        "name": "EVENT_AFTER_SAVE_CONTENT",
        "type": "craft\\events\\ElementContentEvent",
        "desc": "The event that is triggered after an element's content is saved."
    },
    {
        "class": "craft\\services\\Dashboard",
        "name": "EVENT_REGISTER_WIDGET_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered when registering Dashboard widget types."
    },
    {
        "class": "craft\\services\\Dashboard",
        "name": "EVENT_BEFORE_SAVE_WIDGET",
        "type": "craft\\events\\WidgetEvent",
        "desc": "The event that is triggered before a widget is saved."
    },
    {
        "class": "craft\\services\\Dashboard",
        "name": "EVENT_AFTER_SAVE_WIDGET",
        "type": "craft\\events\\WidgetEvent",
        "desc": "The event that is triggered after a widget is saved."
    },
    {
        "class": "craft\\services\\Dashboard",
        "name": "EVENT_BEFORE_DELETE_WIDGET",
        "type": "craft\\events\\WidgetEvent",
        "desc": "The event that is triggered before a widget is deleted."
    },
    {
        "class": "craft\\services\\Dashboard",
        "name": "EVENT_AFTER_DELETE_WIDGET",
        "type": "craft\\events\\WidgetEvent",
        "desc": "The event that is triggered after a widget is deleted."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_BEFORE_CREATE_DRAFT",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered before a draft is created."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_AFTER_CREATE_DRAFT",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered after a draft is created."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_BEFORE_MERGE_SOURCE_CHANGES",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered before source changes are merged into a draft."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_AFTER_MERGE_SOURCE_CHANGES",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered after source changes are merged into a draft."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_BEFORE_APPLY_DRAFT",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered before a draft is applied to its canonical element."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_AFTER_APPLY_DRAFT",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered after a draft is applied to its canonical element."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_BEFORE_PUBLISH_DRAFT",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered before a draft is applied to its canonical element."
    },
    {
        "class": "craft\\services\\Drafts",
        "name": "EVENT_AFTER_PUBLISH_DRAFT",
        "type": "craft\\events\\DraftEvent",
        "desc": "The event that is triggered after a draft is applied to its canonical element."
    },
    {
        "class": "craft\\services\\ElementIndexes",
        "name": "EVENT_DEFINE_SOURCE_TABLE_ATTRIBUTES",
        "type": "craft\\events\\DefineSourceTableAttributesEvent",
        "desc": "The event that is triggered when defining the available table attributes for a source."
    },
    {
        "class": "craft\\services\\ElementIndexes",
        "name": "EVENT_DEFINE_SOURCE_SORT_OPTIONS",
        "type": "craft\\events\\DefineSourceSortOptionsEvent",
        "desc": "The event that is triggered when defining the available sort options for a source."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_REGISTER_ELEMENT_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered when registering element types."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_EAGER_LOAD_ELEMENTS",
        "type": "craft\\events\\EagerLoadElementsEvent",
        "desc": "The event that is triggered before elements are eager-loaded."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_MERGE_ELEMENTS",
        "type": "craft\\events\\MergeElementsEvent",
        "desc": "The event that is triggered after two elements are merged together."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_DELETE_ELEMENT",
        "type": "craft\\events\\DeleteElementEvent",
        "desc": "The event that is triggered before an element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "isNew": {
                "label": "Element is new",
                "conditionsPhp": "$event->isNew"
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_DELETE_ELEMENT",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered after an element is deleted.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_RESTORE_ELEMENT",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered before an element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_RESTORE_ELEMENT",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered after an element is restored.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_SAVE_ELEMENT",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered before an element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_SAVE_ELEMENT",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered after an element is saved.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_UPDATE_SEARCH_INDEX",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered before indexing an elementâ€™s search keywords, or queuing the elementâ€™s search keywords to be updated."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_RESAVE_ELEMENTS",
        "type": "craft\\events\\ElementQueryEvent",
        "desc": "The event that is triggered before resaving a batch of elements."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_RESAVE_ELEMENTS",
        "type": "craft\\events\\ElementQueryEvent",
        "desc": "The event that is triggered after resaving a batch of elements."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_RESAVE_ELEMENT",
        "type": "craft\\events\\BatchElementActionEvent",
        "desc": "The event that is triggered before an element is resaved."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_RESAVE_ELEMENT",
        "type": "craft\\events\\BatchElementActionEvent",
        "desc": "The event that is triggered after an element is resaved."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_PROPAGATE_ELEMENTS",
        "type": "craft\\events\\ElementQueryEvent",
        "desc": "The event that is triggered before propagating a batch of elements."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_PROPAGATE_ELEMENTS",
        "type": "craft\\events\\ElementQueryEvent",
        "desc": "The event that is triggered after propagating a batch of elements."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_PROPAGATE_ELEMENT",
        "type": "craft\\events\\BatchElementActionEvent",
        "desc": "The event that is triggered before an element is propagated."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_PROPAGATE_ELEMENT",
        "type": "craft\\events\\BatchElementActionEvent",
        "desc": "The event that is triggered after an element is propagated."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_UPDATE_SLUG_AND_URI",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered before an elementâ€™s slug and URI are updated, usually following a Structure move.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_UPDATE_SLUG_AND_URI",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered after an elementâ€™s slug and URI are updated, usually following a Structure move.",
        "filters": {
            "duplicating": {
                "label": "Element is being duplicated to a new element",
                "conditionsPhp": "($event->element->duplicateOf && $event->element->getIsCanonical() && !$event->element->updatingFromDerivative)",
                "excludes": [
                    "isNew",
                    "resaving",
                    "revision"
                ]
            },
            "enabled": {
                "label": "Element is enabled",
                "conditionsPhp": "($event->element->enabled && $event->element->getEnabledForSite())"
            },
            "firstSave": {
                "label": "Element is being saved for the first time",
                "conditionsPhp": "$event->element->firstSave",
                "excludes": [
                    "isNew",
                    "draft",
                    "provisional",
                    "revision",
                    "resaving"
                ]
            },
            "propagating": {
                "label": "Element is being propagated",
                "conditionsPhp": "$event->element->propagating"
            },
            "resaving": {
                "label": "Element is being bulk-resaved",
                "conditionsPhp": "$event->element->resaving",
                "excludes": [
                    "firstSave"
                ]
            }
        }
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_PERFORM_ACTION",
        "type": "craft\\events\\ElementActionEvent",
        "desc": "The event that is triggered before an element action is performed."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_PERFORM_ACTION",
        "type": "craft\\events\\ElementActionEvent",
        "desc": "The event that is triggered after an element action is performed."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_BEFORE_MERGE_CANONICAL_CHANGES",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered before canonical element changes are merged into a derivative."
    },
    {
        "class": "craft\\services\\Elements",
        "name": "EVENT_AFTER_MERGE_CANONICAL_CHANGES",
        "type": "craft\\events\\ElementEvent",
        "desc": "The event that is triggered after canonical element changes are merged into a derivative."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_BEFORE_SAVE_DRAFT",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered before a draft is saved."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_AFTER_SAVE_DRAFT",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered after a draft is saved."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_BEFORE_PUBLISH_DRAFT",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered before a draft is published."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_AFTER_PUBLISH_DRAFT",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered after a draft is published."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_BEFORE_DELETE_DRAFT",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered before a draft is deleted."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_AFTER_DELETE_DRAFT",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered after a draft is deleted."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_BEFORE_REVERT_ENTRY_TO_VERSION",
        "type": "craft\\services\\VersionEvent",
        "desc": "The event that is triggered before an entry is reverted to an old version."
    },
    {
        "class": "craft\\services\\EntryRevisions",
        "name": "EVENT_AFTER_REVERT_ENTRY_TO_VERSION",
        "type": "craft\\services\\VersionEvent",
        "desc": "The event that is triggered after an entry is reverted to an old version."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_REGISTER_FIELD_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered when registering field types."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_SAVE_FIELD_GROUP",
        "type": "craft\\events\\FieldGroupEvent",
        "desc": "The event that is triggered before a field group is saved."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_AFTER_SAVE_FIELD_GROUP",
        "type": "craft\\events\\FieldGroupEvent",
        "desc": "The event that is triggered after a field group is saved."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_APPLY_GROUP_DELETE",
        "type": "craft\\events\\FieldGroupEvent",
        "desc": "The event that is triggered before a field group delete is applied to the database."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_DELETE_FIELD_GROUP",
        "type": "craft\\events\\FieldGroupEvent",
        "desc": "The event that is triggered before a field group is deleted."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_AFTER_DELETE_FIELD_GROUP",
        "type": "craft\\events\\FieldGroupEvent",
        "desc": "The event that is triggered after a field group is deleted."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_SAVE_FIELD",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered before a field is saved."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_AFTER_SAVE_FIELD",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered after a field is saved."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_DELETE_FIELD",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered before a field is deleted."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_APPLY_FIELD_DELETE",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered before a field delete is applied to the database."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_AFTER_DELETE_FIELD",
        "type": "craft\\events\\FieldEvent",
        "desc": "The event that is triggered after a field is deleted."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_SAVE_FIELD_LAYOUT",
        "type": "craft\\events\\FieldLayoutEvent",
        "desc": "The event that is triggered before a field layout is saved."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_AFTER_SAVE_FIELD_LAYOUT",
        "type": "craft\\events\\FieldLayoutEvent",
        "desc": "The event that is triggered after a field layout is saved."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_BEFORE_DELETE_FIELD_LAYOUT",
        "type": "craft\\events\\FieldLayoutEvent",
        "desc": "The event that is triggered before a field layout is deleted."
    },
    {
        "class": "craft\\services\\Fields",
        "name": "EVENT_AFTER_DELETE_FIELD_LAYOUT",
        "type": "craft\\events\\FieldLayoutEvent",
        "desc": "The event that is triggered after a field layout is deleted."
    },
    {
        "class": "craft\\services\\Gc",
        "name": "EVENT_RUN",
        "type": "craft\\services\\Event",
        "desc": "The event that is triggered when running garbage collection."
    },
    {
        "class": "craft\\services\\Globals",
        "name": "EVENT_BEFORE_SAVE_GLOBAL_SET",
        "type": "craft\\events\\GlobalSetEvent",
        "desc": "The event that is triggered before a global set is saved."
    },
    {
        "class": "craft\\services\\Globals",
        "name": "EVENT_AFTER_SAVE_GLOBAL_SET",
        "type": "craft\\events\\GlobalSetEvent",
        "desc": "The event that is triggered after a global set is saved."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_REGISTER_GQL_TYPES",
        "type": "craft\\events\\RegisterGqlTypesEvent",
        "desc": "The event that is triggered when registering GraphQL types."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_REGISTER_GQL_QUERIES",
        "type": "craft\\events\\RegisterGqlQueriesEvent",
        "desc": "The event that is triggered when registering GraphQL queries."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_REGISTER_GQL_MUTATIONS",
        "type": "craft\\events\\RegisterGqlMutationsEvent",
        "desc": "The event that is triggered when registering GraphQL mutations."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_REGISTER_GQL_DIRECTIVES",
        "type": "craft\\events\\RegisterGqlDirectivesEvent",
        "desc": "The event that is triggered when registering GraphQL directives."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_REGISTER_GQL_PERMISSIONS",
        "type": "craft\\events\\RegisterGqlPermissionsEvent",
        "desc": "The event that is triggered when registering user permissions."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_REGISTER_GQL_SCHEMA_COMPONENTS",
        "type": "craft\\events\\RegisterGqlSchemaComponentsEvent",
        "desc": "The event that is triggered when registering GraphQL schema components."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_DEFINE_GQL_VALIDATION_RULES",
        "type": "craft\\events\\DefineGqlValidationRulesEvent",
        "desc": "The event that is triggered when defining validation rules to be used."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_BEFORE_EXECUTE_GQL_QUERY",
        "type": "craft\\events\\ExecuteGqlQueryEvent",
        "desc": "The event that is triggered before executing the GraphQL query."
    },
    {
        "class": "craft\\services\\Gql",
        "name": "EVENT_AFTER_EXECUTE_GQL_QUERY",
        "type": "craft\\events\\ExecuteGqlQueryEvent",
        "desc": "The event that is triggered after executing the GraphQL query."
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_BEFORE_LOAD_PLUGINS",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered before any plugins have been loaded"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_AFTER_LOAD_PLUGINS",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after all plugins have been loaded"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_BEFORE_ENABLE_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered before a plugin is enabled"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_AFTER_ENABLE_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered after a plugin is enabled"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_BEFORE_DISABLE_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered before a plugin is disabled"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_AFTER_DISABLE_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered after a plugin is disabled"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_BEFORE_INSTALL_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered before a plugin is installed"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_AFTER_INSTALL_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered after a plugin is installed"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_BEFORE_UNINSTALL_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered before a plugin is uninstalled"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_AFTER_UNINSTALL_PLUGIN",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered after a plugin is uninstalled"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_BEFORE_SAVE_PLUGIN_SETTINGS",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered before a plugin's settings are saved"
    },
    {
        "class": "craft\\services\\Plugins",
        "name": "EVENT_AFTER_SAVE_PLUGIN_SETTINGS",
        "type": "craft\\events\\PluginEvent",
        "desc": "The event that is triggered after a plugin's settings are saved"
    },
    {
        "class": "craft\\services\\ProjectConfig",
        "name": "EVENT_ADD_ITEM",
        "type": "craft\\events\\ConfigEvent",
        "desc": "The event that is triggered when an item is added to the config."
    },
    {
        "class": "craft\\services\\ProjectConfig",
        "name": "EVENT_UPDATE_ITEM",
        "type": "craft\\events\\ConfigEvent",
        "desc": "The event that is triggered when an item is updated in the config."
    },
    {
        "class": "craft\\services\\ProjectConfig",
        "name": "EVENT_REMOVE_ITEM",
        "type": "craft\\events\\ConfigEvent",
        "desc": "The event that is triggered when an item is removed from the config."
    },
    {
        "class": "craft\\services\\ProjectConfig",
        "name": "EVENT_AFTER_APPLY_CHANGES",
        "type": "craft\\services\\Event",
        "desc": "The event that is triggered after pending project config file changes have been applied."
    },
    {
        "class": "craft\\services\\ProjectConfig",
        "name": "EVENT_REBUILD",
        "type": "craft\\events\\RebuildConfigEvent",
        "desc": "The event that is triggered when the project config is being rebuilt."
    },
    {
        "class": "craft\\services\\Revisions",
        "name": "EVENT_BEFORE_CREATE_REVISION",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered before a revision is created."
    },
    {
        "class": "craft\\services\\Revisions",
        "name": "EVENT_AFTER_CREATE_REVISION",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered after a revision is created."
    },
    {
        "class": "craft\\services\\Revisions",
        "name": "EVENT_BEFORE_REVERT_TO_REVISION",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered before an element is reverted to a revision."
    },
    {
        "class": "craft\\services\\Revisions",
        "name": "EVENT_AFTER_REVERT_TO_REVISION",
        "type": "craft\\services\\DraftEvent",
        "desc": "The event that is triggered after an element is reverted to a revision."
    },
    {
        "class": "craft\\services\\Routes",
        "name": "EVENT_BEFORE_SAVE_ROUTE",
        "type": "craft\\events\\RouteEvent",
        "desc": "The event that is triggered before a route is saved."
    },
    {
        "class": "craft\\services\\Routes",
        "name": "EVENT_AFTER_SAVE_ROUTE",
        "type": "craft\\events\\RouteEvent",
        "desc": "The event that is triggered after a route is saved."
    },
    {
        "class": "craft\\services\\Routes",
        "name": "EVENT_BEFORE_DELETE_ROUTE",
        "type": "craft\\events\\RouteEvent",
        "desc": "The event that is triggered before a route is deleted."
    },
    {
        "class": "craft\\services\\Routes",
        "name": "EVENT_AFTER_DELETE_ROUTE",
        "type": "craft\\events\\RouteEvent",
        "desc": "The event that is triggered after a route is deleted."
    },
    {
        "class": "craft\\services\\Search",
        "name": "EVENT_BEFORE_SEARCH",
        "type": "craft\\events\\SearchEvent",
        "desc": "The event that is triggered before a search is performed."
    },
    {
        "class": "craft\\services\\Search",
        "name": "EVENT_AFTER_SEARCH",
        "type": "craft\\events\\SearchEvent",
        "desc": "The event that is triggered after a search is performed."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_BEFORE_SAVE_SECTION",
        "type": "craft\\events\\SectionEvent",
        "desc": "The event that is triggered before a section is saved."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_AFTER_SAVE_SECTION",
        "type": "craft\\events\\SectionEvent",
        "desc": "The event that is triggered after a section is saved."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_BEFORE_DELETE_SECTION",
        "type": "craft\\events\\SectionEvent",
        "desc": "The event that is triggered before a section is deleted."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_BEFORE_APPLY_SECTION_DELETE",
        "type": "craft\\events\\SectionEvent",
        "desc": "The event that is triggered before a section delete is applied to the database."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_AFTER_DELETE_SECTION",
        "type": "craft\\events\\SectionEvent",
        "desc": "The event that is triggered after a section is deleted."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_BEFORE_SAVE_ENTRY_TYPE",
        "type": "craft\\events\\EntryTypeEvent",
        "desc": "The event that is triggered before an entry type is saved."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_AFTER_SAVE_ENTRY_TYPE",
        "type": "craft\\events\\EntryTypeEvent",
        "desc": "The event that is triggered after an entry type is saved."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_BEFORE_DELETE_ENTRY_TYPE",
        "type": "craft\\events\\EntryTypeEvent",
        "desc": "The event that is triggered before an entry type is deleted."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_BEFORE_APPLY_ENTRY_TYPE_DELETE",
        "type": "craft\\events\\EntryTypeEvent",
        "desc": "The event that is triggered before an entry type delete is applied to the database."
    },
    {
        "class": "craft\\services\\Sections",
        "name": "EVENT_AFTER_DELETE_ENTRY_TYPE",
        "type": "craft\\events\\EntryTypeEvent",
        "desc": "The event that is triggered after an entry type is deleted."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_SAVE_SITE_GROUP",
        "type": "craft\\events\\SiteGroupEvent",
        "desc": "The event that is triggered before a site group is saved."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_AFTER_SAVE_SITE_GROUP",
        "type": "craft\\events\\SiteGroupEvent",
        "desc": "The event that is triggered after a site group is saved."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_DELETE_SITE_GROUP",
        "type": "craft\\events\\SiteGroupEvent",
        "desc": "The event that is triggered before a site group is deleted."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_APPLY_GROUP_DELETE",
        "type": "craft\\events\\SiteGroupEvent",
        "desc": "The event that is triggered before a site group delete is applied to the database."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_AFTER_DELETE_SITE_GROUP",
        "type": "craft\\events\\SiteGroupEvent",
        "desc": "The event that is triggered after a site group is deleted."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_SAVE_SITE",
        "type": "craft\\events\\SiteEvent",
        "desc": "The event that is triggered before a site is saved."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_AFTER_SAVE_SITE",
        "type": "craft\\events\\SiteEvent",
        "desc": "The event that is triggered after a site is saved."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_REORDER_SITES",
        "type": "craft\\events\\ReorderSitesEvent",
        "desc": "The event that is triggered before the sites are reordered."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_AFTER_REORDER_SITES",
        "type": "craft\\events\\ReorderSitesEvent",
        "desc": "The event that is triggered after the sites are reordered."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_AFTER_CHANGE_PRIMARY_SITE",
        "type": "craft\\events\\SiteEvent",
        "desc": "The event that is triggered after the primary site has changed"
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_DELETE_SITE",
        "type": "craft\\events\\DeleteSiteEvent",
        "desc": "The event that is triggered before a site is deleted."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_BEFORE_APPLY_SITE_DELETE",
        "type": "craft\\events\\DeleteSiteEvent",
        "desc": "The event that is triggered before a site delete is applied to the database."
    },
    {
        "class": "craft\\services\\Sites",
        "name": "EVENT_AFTER_DELETE_SITE",
        "type": "craft\\events\\DeleteSiteEvent",
        "desc": "The event that is triggered after a site is deleted."
    },
    {
        "class": "craft\\services\\Structures",
        "name": "EVENT_BEFORE_MOVE_ELEMENT",
        "type": "craft\\events\\MoveElementEvent",
        "desc": "The event that is triggered before an element is moved."
    },
    {
        "class": "craft\\services\\Structures",
        "name": "EVENT_AFTER_MOVE_ELEMENT",
        "type": "craft\\events\\MoveElementEvent",
        "desc": "The event that is triggered after an element is moved."
    },
    {
        "class": "craft\\services\\SystemMessages",
        "name": "EVENT_REGISTER_MESSAGES",
        "type": "craft\\events\\RegisterEmailMessagesEvent",
        "desc": "The event that is triggered when registering email messages."
    },
    {
        "class": "craft\\services\\Tags",
        "name": "EVENT_BEFORE_SAVE_GROUP",
        "type": "craft\\events\\TagGroupEvent",
        "desc": "The event that is triggered before a tag group is saved."
    },
    {
        "class": "craft\\services\\Tags",
        "name": "EVENT_AFTER_SAVE_GROUP",
        "type": "craft\\events\\TagGroupEvent",
        "desc": "The event that is triggered after a tag group is saved."
    },
    {
        "class": "craft\\services\\Tags",
        "name": "EVENT_BEFORE_DELETE_GROUP",
        "type": "craft\\events\\TagGroupEvent",
        "desc": "The event that is triggered before a tag group is deleted."
    },
    {
        "class": "craft\\services\\Tags",
        "name": "EVENT_BEFORE_APPLY_GROUP_DELETE",
        "type": "craft\\events\\TagGroupEvent",
        "desc": "The event that is triggered before a tag group delete is applied to the database."
    },
    {
        "class": "craft\\services\\Tags",
        "name": "EVENT_AFTER_DELETE_GROUP",
        "type": "craft\\events\\TagGroupEvent",
        "desc": "The event that is triggered after a tag group is deleted."
    },
    {
        "class": "craft\\services\\TemplateCaches",
        "name": "EVENT_BEFORE_DELETE_CACHES",
        "type": "craft\\services\\SectionEvent",
        "desc": "The event that is triggered before template caches are deleted."
    },
    {
        "class": "craft\\services\\TemplateCaches",
        "name": "EVENT_AFTER_DELETE_CACHES",
        "type": "craft\\services\\SectionEvent",
        "desc": "The event that is triggered after template caches are deleted."
    },
    {
        "class": "craft\\services\\UserGroups",
        "name": "EVENT_BEFORE_SAVE_USER_GROUP",
        "type": "craft\\events\\UserGroupEvent",
        "desc": "The event that is triggered before a user group is saved."
    },
    {
        "class": "craft\\services\\UserGroups",
        "name": "EVENT_AFTER_SAVE_USER_GROUP",
        "type": "craft\\events\\UserGroupEvent",
        "desc": "The event that is triggered after a user group is saved."
    },
    {
        "class": "craft\\services\\UserGroups",
        "name": "EVENT_BEFORE_DELETE_USER_GROUP",
        "type": "craft\\events\\UserGroupEvent",
        "desc": "The event that is triggered before a user group is deleted."
    },
    {
        "class": "craft\\services\\UserGroups",
        "name": "EVENT_BEFORE_APPLY_GROUP_DELETE",
        "type": "craft\\events\\UserGroupEvent",
        "desc": "The event that is triggered before a user group delete is applied to the database."
    },
    {
        "class": "craft\\services\\UserGroups",
        "name": "EVENT_AFTER_DELETE_USER_GROUP",
        "type": "craft\\events\\UserGroupEvent",
        "desc": "The event that is triggered after a user group is saved."
    },
    {
        "class": "craft\\services\\UserPermissions",
        "name": "EVENT_REGISTER_PERMISSIONS",
        "type": "craft\\events\\RegisterUserPermissionsEvent",
        "desc": "The event that is triggered when registering user permissions."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_VERIFY_EMAIL",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered before a user's email is verified."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_VERIFY_EMAIL",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after a user's email is verified."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_ACTIVATE_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered before a user is activated."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_ACTIVATE_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after a user is activated."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_LOCK_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after a user is locked."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_UNLOCK_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered before a user is unlocked."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_UNLOCK_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after a user is unlocked."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_SUSPEND_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered before a user is suspended."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_SUSPEND_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after a user is suspended."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_UNSUSPEND_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered before a user is unsuspended."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_UNSUSPEND_USER",
        "type": "craft\\events\\UserEvent",
        "desc": "The event that is triggered after a user is unsuspended."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_ASSIGN_USER_TO_GROUPS",
        "type": "craft\\events\\UserGroupsAssignEvent",
        "desc": "The event that is triggered before a user is assigned to some user groups."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_ASSIGN_USER_TO_GROUPS",
        "type": "craft\\events\\UserGroupsAssignEvent",
        "desc": "The event that is triggered after a user is assigned to some user groups."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_BEFORE_ASSIGN_USER_TO_DEFAULT_GROUP",
        "type": "craft\\events\\UserAssignGroupEvent",
        "desc": "The event that is triggered before a user is assigned to the default user group."
    },
    {
        "class": "craft\\services\\Users",
        "name": "EVENT_AFTER_ASSIGN_USER_TO_DEFAULT_GROUP",
        "type": "craft\\events\\UserAssignGroupEvent",
        "desc": "The event that is triggered after a user is assigned to the default user group."
    },
    {
        "class": "craft\\services\\Utilities",
        "name": "EVENT_REGISTER_UTILITY_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered when registering utility types."
    },
    {
        "class": "craft\\services\\Volumes",
        "name": "EVENT_REGISTER_VOLUME_TYPES",
        "type": "craft\\events\\RegisterComponentTypesEvent",
        "desc": "The event that is triggered when registering volume types."
    },
    {
        "class": "craft\\services\\Volumes",
        "name": "EVENT_BEFORE_SAVE_VOLUME",
        "type": "craft\\events\\VolumeEvent",
        "desc": "The event that is triggered before an Asset volume is saved."
    },
    {
        "class": "craft\\services\\Volumes",
        "name": "EVENT_AFTER_SAVE_VOLUME",
        "type": "craft\\events\\VolumeEvent",
        "desc": "The event that is triggered after an Asset volume is saved."
    },
    {
        "class": "craft\\services\\Volumes",
        "name": "EVENT_BEFORE_DELETE_VOLUME",
        "type": "craft\\events\\VolumeEvent",
        "desc": "The event that is triggered before an Asset volume is deleted."
    },
    {
        "class": "craft\\services\\Volumes",
        "name": "EVENT_BEFORE_APPLY_VOLUME_DELETE",
        "type": "craft\\events\\VolumeEvent",
        "desc": "The event that is triggered before a volume delete is applied to the database."
    },
    {
        "class": "craft\\services\\Volumes",
        "name": "EVENT_AFTER_DELETE_VOLUME",
        "type": "craft\\events\\VolumeEvent",
        "desc": "The event that is triggered after a Asset volume is deleted."
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\AssetIndexes",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_REGISTER_CACHE_OPTIONS",
        "type": "craft\\events\\RegisterCacheOptionsEvent",
        "desc": "The event that is triggered when registering cache options."
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_REGISTER_TAG_OPTIONS",
        "type": "craft\\events\\RegisterCacheOptionsEvent",
        "desc": "The event that is triggered when registering cache tag invalidation options."
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\ClearCaches",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\DbBackup",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\DeprecationErrors",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\FindAndReplace",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\Migrations",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\PhpInfo",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\ProjectConfig",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\QueueManager",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\SystemMessages",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\SystemReport",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\Updates",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\utilities\\Upgrade",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\volumes\\Local",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\volumes\\MissingVolume",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\volumes\\Temp",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\web\\Application",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the application has been fully initialized"
    },
    {
        "class": "craft\\web\\Application",
        "name": "EVENT_AFTER_EDITION_CHANGE",
        "type": "craft\\events\\EditionChangeEvent",
        "desc": "The event that is triggered after the edition changes"
    },
    {
        "class": "craft\\web\\Application",
        "name": "EVENT_BEFORE_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised before the application starts to handle a request."
    },
    {
        "class": "craft\\web\\Application",
        "name": "EVENT_AFTER_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised after the application successfully handles a request (before the response is sent out)."
    },
    {
        "class": "craft\\web\\Application",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "craft\\web\\Application",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "craft\\web\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "craft\\web\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "craft\\web\\ErrorHandler",
        "name": "EVENT_BEFORE_HANDLE_EXCEPTION",
        "type": "craft\\events\\ExceptionEvent",
        "desc": "The event that is triggered before handling an exception."
    },
    {
        "class": "craft\\web\\Response",
        "name": "EVENT_BEFORE_SEND",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered at the beginning of `send()`."
    },
    {
        "class": "craft\\web\\Response",
        "name": "EVENT_AFTER_SEND",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered at the end of `send()`."
    },
    {
        "class": "craft\\web\\Response",
        "name": "EVENT_AFTER_PREPARE",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered right after `prepare()` is called in `send()`. You may respond to this event to filter the response content before it is sent to the client."
    },
    {
        "class": "craft\\web\\UrlManager",
        "name": "EVENT_REGISTER_CP_URL_RULES",
        "type": "craft\\events\\RegisterUrlRulesEvent",
        "desc": "The event that is triggered when registering URL rules for the control panel."
    },
    {
        "class": "craft\\web\\UrlManager",
        "name": "EVENT_REGISTER_SITE_URL_RULES",
        "type": "craft\\events\\RegisterUrlRulesEvent",
        "desc": "The event that is triggered when registering URL rules for the front-end site."
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_REGISTER_CP_TEMPLATE_ROOTS",
        "type": "craft\\events\\RegisterTemplateRootsEvent",
        "desc": "The event that is triggered when registering control panel template roots"
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_REGISTER_SITE_TEMPLATE_ROOTS",
        "type": "craft\\events\\RegisterTemplateRootsEvent",
        "desc": "The event that is triggered when registering site template roots"
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_BEFORE_RENDER_TEMPLATE",
        "type": "craft\\events\\TemplateEvent",
        "desc": "The event that is triggered before a template gets rendered"
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_AFTER_RENDER_TEMPLATE",
        "type": "craft\\events\\TemplateEvent",
        "desc": "The event that is triggered after a template gets rendered"
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_BEFORE_RENDER_PAGE_TEMPLATE",
        "type": "craft\\events\\TemplateEvent",
        "desc": "The event that is triggered before a page template gets rendered"
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_AFTER_RENDER_PAGE_TEMPLATE",
        "type": "craft\\events\\TemplateEvent",
        "desc": "The event that is triggered after a page template gets rendered"
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_BEGIN_BODY",
        "type": "yii\\web\\Event",
        "desc": "an event that is triggered by `beginBody()`."
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_END_BODY",
        "type": "yii\\web\\Event",
        "desc": "an event that is triggered by `endBody()`."
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_BEGIN_PAGE",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered by `beginPage()`."
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_END_PAGE",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered by `endPage()`."
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_BEFORE_RENDER",
        "type": "yii\\base\\ViewEvent",
        "desc": "an event that is triggered by `renderFile()` right before it renders a view file."
    },
    {
        "class": "craft\\web\\View",
        "name": "EVENT_AFTER_RENDER",
        "type": "yii\\base\\ViewEvent",
        "desc": "an event that is triggered by `renderFile()` right after it renders a view file."
    },
    {
        "class": "craft\\web\\twig\\variables\\Cp",
        "name": "EVENT_REGISTER_FORM_ACTIONS",
        "type": "craft\\events\\FormActionsEvent",
        "desc": "The event that is triggered when preparing the pageâ€™s form actions."
    },
    {
        "class": "craft\\web\\twig\\variables\\Cp",
        "name": "EVENT_REGISTER_CP_NAV_ITEMS",
        "type": "craft\\events\\RegisterCpNavItemsEvent",
        "desc": "The event that is triggered when registering control panel nav items."
    },
    {
        "class": "craft\\web\\twig\\variables\\Cp",
        "name": "EVENT_REGISTER_CP_SETTINGS",
        "type": "craft\\events\\RegisterCpSettingsEvent",
        "desc": "The event that is triggered when registering links that should render on the Settings page in the control panel."
    },
    {
        "class": "craft\\web\\twig\\variables\\CraftVariable",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component's init cycle"
    },
    {
        "class": "craft\\web\\twig\\variables\\CraftVariable",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\web\\twig\\variables\\CraftVariable",
        "name": "EVENT_DEFINE_COMPONENTS",
        "type": "craft\\web\\twig\\variables\\DefineComponentsEvent",
        "desc": "The event that is triggered when defining the Service Locator components."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\CraftSupport",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\Feed",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\MissingWidget",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\MyDrafts",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\NewUsers",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\QuickPost",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\RecentEntries",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_BEFORE_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is saved."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_AFTER_SAVE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered after the component is saved."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_BEFORE_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the component is deleted."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_BEFORE_APPLY_DELETE",
        "type": "craft\\events\\ModelEvent",
        "desc": "The event that is triggered before the delete is applied to the database."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the component is deleted."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_DEFINE_SETTINGS_ATTRIBUTES",
        "type": "craft\\events\\DefineValueEvent",
        "desc": "The event that is triggered when defining the componentâ€™s settings attributes, as returned by `settingsAttributes()`."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "The event that is triggered after the model's init cycle"
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_DEFINE_BEHAVIORS",
        "type": "craft\\events\\DefineBehaviorsEvent",
        "desc": "The event that is triggered when defining the class behaviors"
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_DEFINE_RULES",
        "type": "craft\\events\\DefineRulesEvent",
        "desc": "The event that is triggered when defining the model rules"
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_DEFINE_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the arrayable fields"
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_DEFINE_EXTRA_FIELDS",
        "type": "craft\\events\\DefineFieldsEvent",
        "desc": "The event that is triggered when defining the extra arrayable fields"
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "craft\\widgets\\Updates",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\base\\Application",
        "name": "EVENT_BEFORE_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised before the application starts to handle a request."
    },
    {
        "class": "yii\\base\\Application",
        "name": "EVENT_AFTER_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised after the application successfully handles a request (before the response is sent out)."
    },
    {
        "class": "yii\\base\\Application",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "yii\\base\\Application",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "yii\\base\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\base\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\base\\DynamicModel",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "yii\\base\\DynamicModel",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\base\\Model",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "yii\\base\\Model",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\base\\Module",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "yii\\base\\Module",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "yii\\base\\Widget",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered when the widget is initialized via `init()`."
    },
    {
        "class": "yii\\base\\Widget",
        "name": "EVENT_BEFORE_RUN",
        "type": "yii\\base\\WidgetEvent",
        "desc": "an event raised right before executing a widget. You may set `WidgetEvent::isValid` to be false to cancel the widget execution."
    },
    {
        "class": "yii\\base\\Widget",
        "name": "EVENT_AFTER_RUN",
        "type": "yii\\base\\WidgetEvent",
        "desc": "an event raised right after executing a widget."
    },
    {
        "class": "yii\\captcha\\Captcha",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered when the widget is initialized via `init()`."
    },
    {
        "class": "yii\\captcha\\Captcha",
        "name": "EVENT_BEFORE_RUN",
        "type": "yii\\base\\WidgetEvent",
        "desc": "an event raised right before executing a widget. You may set `WidgetEvent::isValid` to be false to cancel the widget execution."
    },
    {
        "class": "yii\\captcha\\Captcha",
        "name": "EVENT_AFTER_RUN",
        "type": "yii\\base\\WidgetEvent",
        "desc": "an event raised right after executing a widget."
    },
    {
        "class": "yii\\console\\Application",
        "name": "EVENT_BEFORE_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised before the application starts to handle a request."
    },
    {
        "class": "yii\\console\\Application",
        "name": "EVENT_AFTER_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised after the application successfully handles a request (before the response is sent out)."
    },
    {
        "class": "yii\\console\\Application",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "yii\\console\\Application",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "yii\\console\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\AssetController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\AssetController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\BaseMigrateController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\BaseMigrateController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\CacheController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\CacheController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\FixtureController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\FixtureController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\HelpController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\HelpController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\MessageController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\MessageController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\MigrateController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\MigrateController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\controllers\\ServeController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\console\\controllers\\ServeController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\console\\widgets\\Table",
        "name": "EVENT_INIT",
        "type": "yii\\base\\Event",
        "desc": "an event that is triggered when the widget is initialized via `init()`."
    },
    {
        "class": "yii\\console\\widgets\\Table",
        "name": "EVENT_BEFORE_RUN",
        "type": "yii\\base\\WidgetEvent",
        "desc": "an event raised right before executing a widget. You may set `WidgetEvent::isValid` to be false to cancel the widget execution."
    },
    {
        "class": "yii\\console\\widgets\\Table",
        "name": "EVENT_AFTER_RUN",
        "type": "yii\\base\\WidgetEvent",
        "desc": "an event raised right after executing a widget."
    },
    {
        "class": "yii\\data\\ActiveDataFilter",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "yii\\data\\ActiveDataFilter",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\data\\DataFilter",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "yii\\data\\DataFilter",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\db\\ActiveQuery",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the query is initialized via `init()`."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "yii\\db\\ActiveRecord",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_INIT",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the record is initialized via `init()`."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_AFTER_FIND",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after the record is created and populated with query result."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_BEFORE_INSERT",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before inserting a record. You may set `ModelEvent::isValid` to be `false` to stop the insertion."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_AFTER_INSERT",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is inserted."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_BEFORE_UPDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before updating a record. You may set `ModelEvent::isValid` to be `false` to stop the update."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_AFTER_UPDATE",
        "type": "yii\\db\\AfterSaveEvent",
        "desc": "an event that is triggered after a record is updated."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_BEFORE_DELETE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event that is triggered before deleting a record. You may set `ModelEvent::isValid` to be `false` to stop the deletion."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_AFTER_DELETE",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is deleted."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_AFTER_REFRESH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered after a record is refreshed."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_BEFORE_VALIDATE",
        "type": "yii\\base\\ModelEvent",
        "desc": "an event raised at the beginning of `validate()`. You may set `ModelEvent::isValid` to be false to stop the validation."
    },
    {
        "class": "yii\\db\\BaseActiveRecord",
        "name": "EVENT_AFTER_VALIDATE",
        "type": "yii\\base\\Event",
        "desc": "an event raised at the end of `validate()`"
    },
    {
        "class": "yii\\db\\BatchQueryResult",
        "name": "EVENT_RESET",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the batch query is reset."
    },
    {
        "class": "yii\\db\\BatchQueryResult",
        "name": "EVENT_FINISH",
        "type": "yii\\db\\Event",
        "desc": "an event that is triggered when the last batch has been fetched."
    },
    {
        "class": "yii\\i18n\\DbMessageSource",
        "name": "EVENT_MISSING_TRANSLATION",
        "type": "yii\\i18n\\MissingTranslationEvent",
        "desc": "an event that is triggered when a message translation is not found."
    },
    {
        "class": "yii\\i18n\\GettextMessageSource",
        "name": "EVENT_MISSING_TRANSLATION",
        "type": "yii\\i18n\\MissingTranslationEvent",
        "desc": "an event that is triggered when a message translation is not found."
    },
    {
        "class": "yii\\i18n\\MessageSource",
        "name": "EVENT_MISSING_TRANSLATION",
        "type": "yii\\i18n\\MissingTranslationEvent",
        "desc": "an event that is triggered when a message translation is not found."
    },
    {
        "class": "yii\\i18n\\PhpMessageSource",
        "name": "EVENT_MISSING_TRANSLATION",
        "type": "yii\\i18n\\MissingTranslationEvent",
        "desc": "an event that is triggered when a message translation is not found."
    },
    {
        "class": "yii\\rest\\ActiveController",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\rest\\ActiveController",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\rest\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\rest\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    },
    {
        "class": "yii\\web\\Application",
        "name": "EVENT_BEFORE_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised before the application starts to handle a request."
    },
    {
        "class": "yii\\web\\Application",
        "name": "EVENT_AFTER_REQUEST",
        "type": "yii\\base\\Event",
        "desc": "an event raised after the application successfully handles a request (before the response is sent out)."
    },
    {
        "class": "yii\\web\\Application",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised before executing a controller action. You may set `ActionEvent::isValid` to be `false` to cancel the action execution."
    },
    {
        "class": "yii\\web\\Application",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised after executing a controller action."
    },
    {
        "class": "yii\\web\\Controller",
        "name": "EVENT_BEFORE_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right before executing a controller action. You may set `ActionEvent::isValid` to be false to cancel the action execution."
    },
    {
        "class": "yii\\web\\Controller",
        "name": "EVENT_AFTER_ACTION",
        "type": "yii\\base\\ActionEvent",
        "desc": "an event raised right after executing a controller action."
    }
]